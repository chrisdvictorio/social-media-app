// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  username String @unique
  email String @unique
  password String
  bio String? @default("Hello I'm a new User ðŸ‘‹")
  avatar String?
  cover String?
  country String
  birthday DateTime
  friends1 Friend[] @relation("UserFriends1")
  friends2 Friend[] @relation("UserFriends2")
  sentRequests FriendRequest[] @relation("RequestsSent")
  receivedRequests FriendRequest[] @relation("RequestsReceived")
  posts Post[]
  comments Comment[]
  likes Like[]
  notifications Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Friend {
  id Int @id @default(autoincrement())
  userId1 String
  user1 User @relation("UserFriends1", fields: [userId1], references: [id], onDelete: Cascade)
  userId2 String
  user2 User @relation("UserFriends2", fields: [userId2], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model FriendRequest {
  id Int @id @default(autoincrement())
  senderId String
  sender User @relation("RequestsSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver User @relation("RequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  status RequestStatus
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Post {
  id Int @id @default(autoincrement())
  text String?
  image String?
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments Comment[]
  likes Like[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id Int @id @default(autoincrement())
  text String
  authorId String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Notification {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  message String
  type NotificationType
  read Boolean @default(false)
  createdAt DateTime @default(now())
}

enum NotificationType {
  FRIEND_REQUEST
  LIKE
  COMMENT
}